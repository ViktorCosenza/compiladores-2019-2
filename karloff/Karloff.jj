PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    Karloff parser = new Karloff(new FileInputStream(args[0]));
    parser.Karloff();
  }
}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <TIPO: "int"|"bool">
| <NEWVAR: "newVar">
| <PV: ";">
}

TOKEN :
{
<#FACAO_OPCIONAL: ("."(<DIGIT>)*["1"-"9"])?>
|<#EXP_OPCIONAL: ("E"("+"|"-")? (<DIGIT>)*)?>
|<#CHAR: ["a"-"z", "A"-"Z"]>
|<#DIGIT: ["0"-"9"]>
|<#OP: "+"|"-"|"*"|"/"|"&"|"|"|"<"|">"|"==">

|<ID: <CHAR>(<CHAR>|<DIGIT>|"_")*>
|<NUM: ((["1"-"9"](<DIGIT>)*) | "0")(<FACAO_OPCIONAL>)*<EXP_OPCIONAL>>
|<VARDECL: (<NEWVAR> <TIPO> <ID> <PV>)*> 

|<#FATOR: <ID>>
|<#EXP: >
|<#ATRIB: <ID>"="<EXP><PV>>
|<COMMAND: ()>
|<SEQCOMMANDS: COMMAND*>
}



void Karloff () :
{}
{ 

  Main() 
  //Func()
  <EOF> 
}

void VarDecl():{}
{
  <NEWVAR> <TIPO> <ID> <PV>
}

void SeqCommands():{}
{

}

void Main ():
{}
{
 <VOID><MAIN> <ACHAVES> 
 
 VarDecl()
 // SeqComandos()

 <FCHAVES>

}





